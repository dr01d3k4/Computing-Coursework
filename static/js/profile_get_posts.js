// Generated by CoffeeScript 1.6.3
(function() {
  $(document).ready(function() {
    var $postReplyBox, $postReplyBoxAppendedToButton, $postReplyBoxCharactersRemaining, $postReplyBoxContent, $postReplyBoxFooter, $postReplyBoxPost, $postReplyBoxPostContainer, $postReplyBoxTextBox, $postTopLayer, buildPostHtml, closePostReplyBox, hideChildren, maximumReplyLengthCharacters, noPostsTime, onDeleteClicked, onPostReplyClicked, onPostReplyOpenClicked, onViewConversationClicked, onViewRepliesClicked, postReplyBoxAppendedToId, postReplyClicked, renderFirstPosts, showSpeed, viewRepliesPressed;
    $postTopLayer = $("#post-top-layer");
    showSpeed = 250;
    noPostsTime = 600;
    viewRepliesPressed = false;
    maximumReplyLengthCharacters = 255;
    $postReplyBox = $("<div>");
    $postReplyBox.attr("id", "post-reply-box");
    $postReplyBoxAppendedToButton = null;
    postReplyBoxAppendedToId = -1;
    $postReplyBoxContent = $("<div>");
    $postReplyBoxContent.attr("id", "post-reply-box-content");
    $postReplyBoxTextBox = $("<textarea>");
    $postReplyBoxTextBox.attr("id", "post-reply-box-text-box");
    $postReplyBoxTextBox.attr("type", "text");
    $postReplyBoxTextBox.attr("placeholder", "Type a reply");
    $postReplyBoxTextBox.attr("autofocus", "autofocus");
    $postReplyBoxTextBox.attr("maxlength", maximumReplyLengthCharacters);
    $postReplyBoxTextBox.attr("name", "reply");
    $postReplyBoxTextBox.attr("spellcheck", "true");
    $postReplyBoxTextBox.attr("autocorrect", "on");
    $postReplyBoxTextBox.attr("autocapitalize", "on");
    $postReplyBoxContent.append($postReplyBoxTextBox);
    $postReplyBox.append($postReplyBoxContent);
    $postReplyBoxFooter = $("<div>");
    $postReplyBoxFooter.attr("id", "post-reply-box-footer");
    $postReplyBoxCharactersRemaining = $("<span>");
    $postReplyBoxCharactersRemaining.addClass("post-small-text-left");
    $postReplyBoxCharactersRemaining.text("255 characters remaining");
    $postReplyBoxFooter.append($postReplyBoxCharactersRemaining);
    $postReplyBoxPostContainer = $("<div>");
    $postReplyBoxPostContainer.attr("id", "post-reply-box-post-container");
    $postReplyBoxPost = $("<div>");
    $postReplyBoxPost.attr("id", "post-reply-box-post");
    $postReplyBoxPost.text("Post");
    $postReplyBoxPostContainer.append($postReplyBoxPost);
    $postReplyBoxFooter.append($postReplyBoxPostContainer);
    $postReplyBox.append($postReplyBoxFooter);
    $postReplyBoxTextBox.bind("input propertychange", function() {
      var charactersRemaining, red, start;
      charactersRemaining = maximumReplyLengthCharacters - this.value.length;
      $postReplyBoxCharactersRemaining.text("" + charactersRemaining + " character" + (charactersRemaining !== 1 ? 's' : '') + " remaining");
      start = 50;
      if (charactersRemaining < start) {
        red = Math.floor(255 * (start - charactersRemaining) / start);
        return $postReplyBoxCharactersRemaining.css("color", "rgb(" + red + ", 0, 0)");
      } else {
        return $postReplyBoxCharactersRemaining.css("color", "black");
      }
    });
    closePostReplyBox = function($button) {
      if ($postReplyBoxAppendedToButton == null) {
        return;
      }
      $postReplyBox.slideUp(showSpeed, function() {
        return $postReplyBox.detach();
      });
      $button.text("Post reply");
      $postReplyBoxAppendedToButton = null;
      return postReplyBoxAppendedToId = -1;
    };
    onPostReplyOpenClicked = function() {
      var $button, id;
      $button = $(this);
      id = $button.parent().parent().children(".post-id-meta").text();
      if ($postReplyBoxAppendedToButton != null ? $postReplyBoxAppendedToButton.is($button) : void 0) {
        return closePostReplyBox($button);
      } else {
        if ($postReplyBoxAppendedToButton != null) {
          $postReplyBoxAppendedToButton.text("Post reply");
        }
        $button.text("Close");
        $postReplyBoxAppendedToButton = $button;
        postReplyBoxAppendedToId = id;
        return $postReplyBox.slideUp(showSpeed, function() {
          return $postReplyBox.appendTo($button.parent().parent()).hide().slideDown(showSpeed, function() {
            return $postReplyBoxTextBox.focus();
          });
        });
      }
    };
    postReplyClicked = false;
    onPostReplyClicked = function() {
      var $blankPost, $button, id, postContent;
      if (postReplyClicked) {
        return;
      }
      postReplyClicked = true;
      $button = $(this);
      postContent = $postReplyBoxTextBox.val();
      if (postContent.length === 0) {
        $blankPost = $("<span>");
        $blankPost.addClass("post-small-text-right");
        $blankPost.text("Please enter a reply");
        $blankPost.hide();
        $button.after($blankPost);
        $blankPost.show(showSpeed).delay(noPostsTime).hide(showSpeed, function() {
          $blankPost.remove();
          return postReplyClicked = false;
        });
        return;
      }
      id = postReplyBoxAppendedToId;
      return $.ajax({
        type: "POST",
        url: "/social/api/post-post/",
        data: {
          content: postContent,
          replyToId: id
        }
      }).done(function(data) {
        var $parent;
        $postReplyBoxTextBox.val("");
        $postReplyBoxTextBox.text("");
        closePostReplyBox($postReplyBoxAppendedToButton);
        if (id === "NEW" || viewingSelf) {
          buildPostHtml(data.post, $postTopLayer, true, false, true, true);
        }
        if (id !== "NEW") {
          $parent = $button.parent().parent().parent().parent().parent().children(".post-replies");
          buildPostHtml(data.post, $parent, false, false, true, true);
          $button.parent().parent().parent().parent().children(".post-footer").children(".post-view-reply").text("Close");
        }
        return postReplyClicked = false;
      });
    };
    $postReplyBoxPost.click(onPostReplyClicked);
    hideChildren = function($container, func) {
      var $postReplies;
      $postReplies = $container.children(".post-replies");
      return $postReplies.slideUp(showSpeed, function() {
        $postReplies.children().remove();
        $postReplies.slideDown();
        return func();
      });
    };
    onViewRepliesClicked = function() {
      var $button, $postReplyContainer, id;
      if (viewRepliesPressed) {
        return;
      }
      viewRepliesPressed = true;
      $button = $(this);
      $postReplyContainer = $button.parent().parent().parent().children(".post-replies");
      if ($postReplyContainer.children().length === 0) {
        id = $button.parent().parent().children(".post-id-meta").text();
        return $.getJSON("/social/api/get-replies-to/" + id + "/", function(data) {
          var $noPosts, post, _i, _len, _ref;
          if (data.posts.length === 0) {
            $noPosts = $("<span>");
            $noPosts.addClass("post-small-text-left");
            $noPosts.text("No posts to display");
            $noPosts.hide();
            $button.after($noPosts);
            return $noPosts.show(showSpeed).delay(noPostsTime).hide(showSpeed, function() {
              $noPosts.remove();
              return viewRepliesPressed = false;
            });
          } else {
            _ref = data.posts;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              post = _ref[_i];
              buildPostHtml(post, $postReplyContainer);
            }
            $button.text("Close");
            return viewRepliesPressed = false;
          }
        });
      } else {
        return hideChildren($postReplyContainer.parent(), function() {
          $button.text("View replies");
          return viewRepliesPressed = false;
        });
      }
    };
    onViewConversationClicked = function() {
      var $button, showNextConversationLayer;
      $button = $(this);
      showNextConversationLayer = function() {
        var $container, $post, $replies, id;
        id = $button.children(".post-is-reply-to-id").text();
        if (id === "") {
          return;
        }
        $post = $button.parent().parent();
        $container = $post.parent();
        $replies = $container.children(".post-replies");
        return $.getJSON("/social/api/get-post/" + id + "/", function(data) {
          var $postContainer;
          $post.detach();
          $replies.detach();
          buildPostHtml(data.post, $container, false, true, false, false, true);
          $container.children(".post").hide().slideDown(showSpeed);
          $container.children(".post").children(".post-footer").children(".post-view-reply").text("Close");
          $postContainer = $("<div>");
          $postContainer.addClass("post-container");
          $postContainer.append($post);
          $postContainer.append($replies);
          $postContainer.appendTo($container.children(".post-replies"));
          if (data.post.isReplyTo) {
            $button.remove();
          } else {
            $button.hide(showSpeed).remove();
          }
          if (data.post.isReplyTo) {
            $button = $container.children(".post").children(".post-header").children(".post-view-conversation");
            return setTimeout(showNextConversationLayer, showSpeed + 100);
          }
        });
      };
      return showNextConversationLayer();
    };
    onDeleteClicked = function() {
      var $button, $post, id;
      $button = $(this);
      $post = $button.parent().parent();
      id = $post.children(".post-id-meta").text();
      return createConfirmDialogue({
        title: "Delete Post",
        body: "Are you sure you want to delete this post",
        yesFunction: function() {
          $.ajax({
            type: "POST",
            url: "/social/api/delete-post/",
            data: {
              id: id
            }
          }).done(function() {
            return $postTopLayer.find(".post-id-meta").each(function() {
              var $container, $id;
              $id = $(this);
              if ($id.text() === id) {
                $container = $id.parent().parent();
                return $container.slideUp(showSpeed, function() {
                  var $replies;
                  $replies = $container.parent();
                  $container.remove();
                  if ($replies.hasClass("post-replies") && $replies.children().length === 0) {
                    return $replies.parent().children(".post").children(".post-footer").children(".post-view-reply").text("View replies");
                  }
                });
              }
            });
          });
          return true;
        }
      });
    };
    buildPostHtml = function(post, $parent, isTopLayer, attachToParent, animate, prepend, showViewConversation) {
      var $firstPostUserLink, $post, $postContainer, $postContent, $postDate, $postDelete, $postFooter, $postHeader, $postIdMeta, $postPostReply, $postReplies, $postViewReplies, $posterLink, $viewConversation, firstPost;
      if (isTopLayer == null) {
        isTopLayer = false;
      }
      if (attachToParent == null) {
        attachToParent = false;
      }
      if (animate == null) {
        animate = true;
      }
      if (prepend == null) {
        prepend = false;
      }
      if (showViewConversation == null) {
        showViewConversation = false;
      }
      $postContainer = null;
      if (attachToParent) {
        $postContainer = $parent;
      } else {
        $postContainer = $("<div>");
        $postContainer.addClass("post-container");
      }
      $post = $("<div>");
      $post.addClass("post");
      $postHeader = $("<header>");
      $postHeader.addClass("post-header");
      $posterLink = $("<a>");
      $posterLink.addClass("post-poster-link");
      $posterLink.attr("href", post.poster.absoluteUrl);
      $posterLink.text("" + post.poster.fullName + " - @" + post.poster.username);
      $postHeader.append($posterLink);
      if (post.isReplyTo && showViewConversation) {
        firstPost = post.isReplyTo;
        $viewConversation = $("<div>");
        $viewConversation.addClass("post-view-conversation");
        $viewConversation.text("View conversation");
        $viewConversation.click(onViewConversationClicked);
        $viewConversation.append("<span class='post-is-reply-to-id'>" + firstPost.id + "</span>");
        $postHeader.append($viewConversation);
      }
      $postDate = $("<div>");
      $postDate.addClass("post-date");
      $postDate.text("" + post.date);
      $postHeader.append($postDate);
      $post.append($postHeader);
      $postContent = $("<section>");
      $postContent.addClass("post-content");
      if (post.isReplyTo) {
        firstPost = post.isReplyTo;
        $firstPostUserLink = $("<a>");
        $firstPostUserLink.addClass("post-reply-to-username");
        $firstPostUserLink.attr("href", firstPost.poster.absoluteUrl);
        $firstPostUserLink.text("@" + firstPost.poster.fullName);
        $postContent.append($firstPostUserLink);
        $postContent.append(": ");
      }
      $postContent.append("" + post.content);
      $post.append($postContent);
      $postFooter = $("<footer>");
      $postFooter.addClass("post-footer");
      $postViewReplies = $("<div>");
      $postViewReplies.addClass("post-view-reply");
      $postViewReplies.text("View replies");
      $postFooter.append($postViewReplies);
      $postPostReply = $("<div>");
      $postPostReply.addClass("post-post-reply");
      $postPostReply.text("Post reply");
      $postFooter.append($postPostReply);
      $postPostReply.click(onPostReplyOpenClicked);
      if (post.isDeletableByLoggedInUser) {
        $postDelete = $("<div>");
        $postDelete.addClass("post-delete");
        $postDelete.text("Delete");
        $postFooter.append($postDelete);
        $postDelete.click(onDeleteClicked);
      }
      $post.append($postFooter);
      $postIdMeta = $("<div>");
      $postIdMeta.addClass("post-id-meta");
      $postIdMeta.text(post.id);
      $post.append($postIdMeta);
      $postContainer.prepend($post);
      if (!$postContainer.has(".post-replies").length) {
        $postReplies = $("<div>");
        $postReplies.addClass("post-replies");
        $postContainer.append($postReplies);
      }
      if (animate) {
        $postContainer.hide();
        if (prepend) {
          $parent.prepend($postContainer);
        } else {
          $parent.append($postContainer);
        }
        $postContainer.slideDown(showSpeed);
      } else {
        if (prepend) {
          $parent.prepend($postContainer);
        } else {
          $parent.append($postContainer);
        }
      }
      return $postViewReplies.click(onViewRepliesClicked);
    };
    renderFirstPosts = function(data) {
      var post, _i, _len, _ref;
      _ref = data.posts;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        post = _ref[_i];
        buildPostHtml(post, $postTopLayer, true, false, true, false, true);
      }
      return null;
    };
    if (viewingSelf) {
      $.getJSON("/social/api/get-posts-by-users-followed-by/" + loggedInUsername + "/", renderFirstPosts);
    } else {
      $.getJSON("/social/api/get-posts-by/" + viewingUsername + "/", renderFirstPosts);
    }
    return $("#post-new-post-button").click(onPostReplyOpenClicked);
  });

}).call(this);
