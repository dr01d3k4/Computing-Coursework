// Generated by CoffeeScript 1.4.0
(function() {
  var ConfirmDialogue, Dialogue,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Dialogue = (function() {

    function Dialogue(options) {
      var body, _i, _len, _ref,
        _this = this;
      if ($("body").find(".dialogue").length !== 0) {
        return null;
      }
      this.title = options.title || "";
      this.body = options.body || options.content || [];
      this.hasCloseButton = options.closeButton != null ? options.closeButton : options.hasCloseButton != null ? options.hasCloseButton : true;
      this.$dialogue = $("<div>");
      this.$dialogue.addClass("dialogue");
      this.$dialogueVerticalCenterContainer = $("<div>");
      this.$dialogueVerticalCenterContainer.addClass("dialogue-vertical-center-container");
      this.$dialogue.append(this.$dialogueVerticalCenterContainer);
      this.$dialogueContainer = $("<div>");
      this.$dialogueContainer.addClass("dialogue-container");
      this.$dialogueVerticalCenterContainer.append(this.$dialogueContainer);
      this.$dialogueContainer.click(function() {
        return false;
      });
      this.width = options.width || this.$dialogueContainer.css("max-width");
      this.$dialogueContainer.css("max-width", this.width);
      this.$dialogueHeader = $("<header>");
      this.$dialogueHeader.addClass("dialogue-header");
      if (this.hasCloseButton) {
        this.$dialogueCloseButton = $("<div>");
        this.$dialogueCloseButton.addClass("dialogue-close-button");
        this.$dialogueCloseButton.text("X");
        this.$dialogueHeader.append(this.$dialogueCloseButton);
        this.$dialogueCloseButton.click(function() {
          return _this.onCloseButtonClicked();
        });
        this.$dialogue.click(function() {
          return _this.onCloseButtonClicked;
        });
      }
      this.$dialogueTitle = $("<h1>");
      this.$dialogueTitle.text(this.title);
      this.$dialogueHeader.append(this.$dialogueTitle);
      this.$dialogueContainer.append(this.$dialogueHeader);
      this.$dialogueContent = $("<div>");
      this.$dialogueContent.addClass("dialogue-content");
      _ref = this.body;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        body = _ref[_i];
        this.$dialogueContentBody = $("<p>");
        this.$dialogueContentBody.text(body);
        this.$dialogueContent.append(this.$dialogueContentBody);
      }
      this.$dialogueContainer.append(this.$dialogueContent);
      this.$dialogue.appendTo($("body"));
    }

    Dialogue.prototype.close = function() {
      if (this.$dialogue != null) {
        return this.$dialogue.remove();
      }
    };

    Dialogue.prototype.onCloseButtonClicked = function() {
      return this.close();
    };

    return Dialogue;

  })();

  ConfirmDialogue = (function(_super) {

    __extends(ConfirmDialogue, _super);

    function ConfirmDialogue(options) {
      var _this = this;
      options.closeButton = false;
      options.hasCloseButton = false;
      ConfirmDialogue.__super__.constructor.call(this, options);
      if (this.$dialogue == null) {
        return;
      }
      this.yesFunction = options.yesFunc || options.yesFunction || options.yes || function() {
        return true;
      };
      this.noFunction = options.noFunc || options.noFunction || options.no || function() {
        return true;
      };
      this.$dialogueButtonContainer = $("<div>");
      this.$dialogueButtonContainer.addClass("dialogue-button-container");
      this.$noButton = $("<div>");
      this.$noButton.addClass("dialogue-button");
      this.$noButton.text("No");
      this.$dialogueButtonContainer.append(this.$noButton);
      this.$yesButton = $("<div>");
      this.$yesButton.addClass("dialogue-button");
      this.$yesButton.text("Yes");
      this.$dialogueButtonContainer.append(this.$yesButton);
      this.$noButton.click(function() {
        return _this.handleConfirmationButtonClick(_this.noFunction);
      });
      this.$yesButton.click(function() {
        return _this.handleConfirmationButtonClick(_this.yesFunction);
      });
      this.$dialogueContent.append(this.$dialogueButtonContainer);
    }

    ConfirmDialogue.prototype.onCloseButtonClicked = function() {
      throw "Confirm dialogue doesn't have a close button";
    };

    ConfirmDialogue.prototype.handleConfirmationButtonClick = function(buttonClickedFunction) {
      if (buttonClickedFunction(this)) {
        return this.close();
      }
    };

    return ConfirmDialogue;

  })(Dialogue);

  window.Dialogue = Dialogue;

  window.ConfirmDialogue = ConfirmDialogue;

}).call(this);
